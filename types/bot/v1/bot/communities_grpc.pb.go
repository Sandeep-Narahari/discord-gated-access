// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/bot/communities.proto

package bot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityServicesClient is the client API for CommunityServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServicesClient interface {
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error)
	UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error)
	Communities(ctx context.Context, in *GetCommunitiesRequest, opts ...grpc.CallOption) (*GetCommunitiesResponse, error)
	CommunityById(ctx context.Context, in *GetCommunityByIDRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error)
	CommunityByCollectionId(ctx context.Context, in *GetCommunityByCollectionIdRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error)
	CommunityByNFTRoleId(ctx context.Context, in *GetCommunityByNFTRoleIdRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error)
	CommunityByDiscordCategoryID(ctx context.Context, in *GetCommunityByDiscordCategoryIDRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error)
}

type communityServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServicesClient(cc grpc.ClientConnInterface) CommunityServicesClient {
	return &communityServicesClient{cc}
}

func (c *communityServicesClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CreateCommunityResponse, error) {
	out := new(CreateCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/CreateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*UpdateCommunityResponse, error) {
	out := new(UpdateCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/UpdateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) Communities(ctx context.Context, in *GetCommunitiesRequest, opts ...grpc.CallOption) (*GetCommunitiesResponse, error) {
	out := new(GetCommunitiesResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/Communities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) CommunityById(ctx context.Context, in *GetCommunityByIDRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error) {
	out := new(GetCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/CommunityById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) CommunityByCollectionId(ctx context.Context, in *GetCommunityByCollectionIdRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error) {
	out := new(GetCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/CommunityByCollectionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) CommunityByNFTRoleId(ctx context.Context, in *GetCommunityByNFTRoleIdRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error) {
	out := new(GetCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/CommunityByNFTRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServicesClient) CommunityByDiscordCategoryID(ctx context.Context, in *GetCommunityByDiscordCategoryIDRequest, opts ...grpc.CallOption) (*GetCommunityResponse, error) {
	out := new(GetCommunityResponse)
	err := c.cc.Invoke(ctx, "/v1.bot.CommunityServices/CommunityByDiscordCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServicesServer is the server API for CommunityServices service.
// All implementations must embed UnimplementedCommunityServicesServer
// for forward compatibility
type CommunityServicesServer interface {
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error)
	UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error)
	Communities(context.Context, *GetCommunitiesRequest) (*GetCommunitiesResponse, error)
	CommunityById(context.Context, *GetCommunityByIDRequest) (*GetCommunityResponse, error)
	CommunityByCollectionId(context.Context, *GetCommunityByCollectionIdRequest) (*GetCommunityResponse, error)
	CommunityByNFTRoleId(context.Context, *GetCommunityByNFTRoleIdRequest) (*GetCommunityResponse, error)
	CommunityByDiscordCategoryID(context.Context, *GetCommunityByDiscordCategoryIDRequest) (*GetCommunityResponse, error)
	mustEmbedUnimplementedCommunityServicesServer()
}

// UnimplementedCommunityServicesServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServicesServer struct {
}

func (UnimplementedCommunityServicesServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServicesServer) UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunity not implemented")
}
func (UnimplementedCommunityServicesServer) Communities(context.Context, *GetCommunitiesRequest) (*GetCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Communities not implemented")
}
func (UnimplementedCommunityServicesServer) CommunityById(context.Context, *GetCommunityByIDRequest) (*GetCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityById not implemented")
}
func (UnimplementedCommunityServicesServer) CommunityByCollectionId(context.Context, *GetCommunityByCollectionIdRequest) (*GetCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityByCollectionId not implemented")
}
func (UnimplementedCommunityServicesServer) CommunityByNFTRoleId(context.Context, *GetCommunityByNFTRoleIdRequest) (*GetCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityByNFTRoleId not implemented")
}
func (UnimplementedCommunityServicesServer) CommunityByDiscordCategoryID(context.Context, *GetCommunityByDiscordCategoryIDRequest) (*GetCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityByDiscordCategoryID not implemented")
}
func (UnimplementedCommunityServicesServer) mustEmbedUnimplementedCommunityServicesServer() {}

// UnsafeCommunityServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServicesServer will
// result in compilation errors.
type UnsafeCommunityServicesServer interface {
	mustEmbedUnimplementedCommunityServicesServer()
}

func RegisterCommunityServicesServer(s grpc.ServiceRegistrar, srv CommunityServicesServer) {
	s.RegisterService(&CommunityServices_ServiceDesc, srv)
}

func _CommunityServices_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/CreateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_UpdateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).UpdateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/UpdateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).UpdateCommunity(ctx, req.(*UpdateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_Communities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).Communities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/Communities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).Communities(ctx, req.(*GetCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_CommunityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).CommunityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/CommunityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).CommunityById(ctx, req.(*GetCommunityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_CommunityByCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByCollectionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).CommunityByCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/CommunityByCollectionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).CommunityByCollectionId(ctx, req.(*GetCommunityByCollectionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_CommunityByNFTRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByNFTRoleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).CommunityByNFTRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/CommunityByNFTRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).CommunityByNFTRoleId(ctx, req.(*GetCommunityByNFTRoleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityServices_CommunityByDiscordCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByDiscordCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServicesServer).CommunityByDiscordCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.bot.CommunityServices/CommunityByDiscordCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServicesServer).CommunityByDiscordCategoryID(ctx, req.(*GetCommunityByDiscordCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityServices_ServiceDesc is the grpc.ServiceDesc for CommunityServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.bot.CommunityServices",
	HandlerType: (*CommunityServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityServices_CreateCommunity_Handler,
		},
		{
			MethodName: "UpdateCommunity",
			Handler:    _CommunityServices_UpdateCommunity_Handler,
		},
		{
			MethodName: "Communities",
			Handler:    _CommunityServices_Communities_Handler,
		},
		{
			MethodName: "CommunityById",
			Handler:    _CommunityServices_CommunityById_Handler,
		},
		{
			MethodName: "CommunityByCollectionId",
			Handler:    _CommunityServices_CommunityByCollectionId_Handler,
		},
		{
			MethodName: "CommunityByNFTRoleId",
			Handler:    _CommunityServices_CommunityByNFTRoleId_Handler,
		},
		{
			MethodName: "CommunityByDiscordCategoryID",
			Handler:    _CommunityServices_CommunityByDiscordCategoryID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bot/communities.proto",
}
